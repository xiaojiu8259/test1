apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: tomcat-mysql-example
  template: tomcat-mysql-example
message: >-
  The following service(s) have been created in your project: ${NAME},
  ${DATABASE_SERVICE_NAME}.
  
metadata:
  annotations:
    description: >-
      An example Tomcat application with a MySQL database. 

      WARNING: Any data stored will be lost upon pod destruction. Only use this
      template for testing.
    iconClass: icon-apache
    openshift.io/display-name: Tomcat + MySQL (Ephemeral)
    openshift.io/documentation-url: 'https://github.com/openshift/cakephp-ex'
    openshift.io/long-description: >-
      This template defines resources needed to develop a CakePHP application,
      including a build configuration, application deployment configuration, and
      database deployment configuration.  The database is stored in
      non-persistent storage, so this configuration should be used for
      experimental purposes only.
    openshift.io/provider-display-name: 'Red Hat, Inc.'
    openshift.io/support-url: 'https://access.redhat.com'
    tags: 'quickstart,java,tomcat'
    template.openshift.io/bindable: 'false'
  creationTimestamp: '2018-03-09T11:43:30Z'
  name: tomcat-mysql-example
  namespace: openshift
  resourceVersion: '10706'
  selfLink: >-
    /apis/template.openshift.io/v1/namespaces/openshift/templates/tomcat-mysql-example
  uid: 77e8c7e3-ff69-11e7-8edc-000c2900f509
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: '${NAME}'
    stringData:
      database-password: '${DATABASE_PASSWORD}'
      database-user: '${DATABASE_USER}'
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes and load balances the application pods
        service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      name: '${NAME}'
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        name: '${NAME}'
  - apiVersion: v1
    kind: Route
    metadata:
      name: '${NAME}'
    spec:
      host: '${APPLICATION_DOMAIN}'
      to:
        kind: Service
        name: '${NAME}'
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      name: '${NAME}'
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: Defines how to build the application
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: '${NAME}'
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: '${NAME}:latest'
      postCommit:
        script: ./lib/Cake/Console/cake test app AllTests
      source:
        contextDir: '${CONTEXT_DIR}'
        git:
          ref: '${SOURCE_REPOSITORY_REF}'
          uri: '${SOURCE_REPOSITORY_URL}'
        type: Git
      strategy:
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: 'tomcat:latest'
            namespace: '${NAMESPACE}'
        type: Source
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - github:
            secret: '${GITHUB_WEBHOOK_SECRET}'
          type: GitHub
        - generic:
            secret: '${GENERIC_WEBHOOK_SECRET}'
          type: Generic
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the application server
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: '${NAME}'
    spec:
      replicas: 1
      selector:
        name: '${NAME}'
      strategy:
        recreateParams:
          pre:
            execNewPod:
              command:
                - ./migrate-database.sh
              containerName: tomcat-mysql-example
            failurePolicy: Retry
        type: Recreate
      template:
        metadata:
          labels:
            name: '${NAME}'
          name: '${NAME}'
        spec:
          containers:
            - env:
                - name: DATABASE_SERVICE_NAME
                  value: '${DATABASE_SERVICE_NAME}'
                - name: DATABASE_ENGINE
                  value: '${DATABASE_ENGINE}'
                - name: DATABASE_NAME
                  value: '${DATABASE_NAME}'
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: '${NAME}'
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: '${NAME}'
              image: ' '
              livenessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 30
                timeoutSeconds: 3
              name: tomcat-mysql-example
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 3
                timeoutSeconds: 3
              resources:
                limits:
                  memory: '${MEMORY_LIMIT}'
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - tomcat-mysql-example
            from:
              kind: ImageStreamTag
              name: '${NAME}:latest'
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: Exposes the database server
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      ports:
        - name: mysql
          port: 3306
          targetPort: 3306
      selector:
        name: '${DATABASE_SERVICE_NAME}'
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: Defines how to deploy the database
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      replicas: 1
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: '${DATABASE_SERVICE_NAME}'
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          containers:
            - env:
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: '${NAME}'
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: '${NAME}'
                - name: MYSQL_DATABASE
                  value: '${DATABASE_NAME}'
              image: ' '
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 3306
                timeoutSeconds: 1
              name: mysql
              ports:
                - containerPort: 3306
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u
                      ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources:
                limits:
                  memory: '${MEMORY_MYSQL_LIMIT}'
              volumeMounts:
                - mountPath: /var/lib/mysql/data
                  name: data
          volumes:
            - emptyDir: {}
              name: data
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - mysql
            from:
              kind: ImageStreamTag
              name: 'mysql:5.7'
              namespace: '${NAMESPACE}'
          type: ImageChange
        - type: ConfigChange
parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: NAME
    required: true
    value: tomcat-mysql-example
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: NAMESPACE
    required: true
    value: openshift
  - description: Maximum amount of memory the Tomcst container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: Maximum amount of memory the MySQL container can use.
    displayName: Memory Limit (MySQL)
    name: MEMORY_MYSQL_LIMIT
    required: true
    value: 512Mi
  - description: The URL of the repository with your application source code.
    displayName: Git Repository URL
    name: SOURCE_REPOSITORY_URL
    required: true
    value: 'https://github.com/xiaojiu8259/test1.git'
  - description: >-
      Set this to a branch name, tag or other ref of your repository if you are
      not using the default branch.
    displayName: Git Reference
    name: SOURCE_REPOSITORY_REF
  - description: >-
      Set this to the relative path to your project if it is not in the root of
      your repository.
    displayName: Context Directory
    name: CONTEXT_DIR
  - description: >-
      The exposed hostname that will route to the CakePHP service, if left blank
      a value will be defaulted.
    displayName: Application Hostname
    name: APPLICATION_DOMAIN
  - description: >-
      Github trigger secret.  A difficult to guess string encoded as part of the
      webhook URL.  Not encrypted.
    displayName: GitHub Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
  - description: A secret string used to configure the Generic webhook.
    displayName: Generic Webhook Secret
    from: '[a-zA-Z0-9]{40}'
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: mysql
  - description: 'Database engine: postgresql, mysql or sqlite (default).'
    displayName: Database Engine
    name: DATABASE_ENGINE
    required: true
    value: mysql
  - displayName: Database Name
    name: DATABASE_NAME
    required: true
    value: default
  - displayName: Database User
    name: DATABASE_USER
    required: true
    value: tomcat
  - displayName: Database Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: DATABASE_PASSWORD
